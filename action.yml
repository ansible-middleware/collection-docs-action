---
name: 'Changelog and Documentation'
description: 'Generate changelog and documentation for Ansible collections'
inputs:
  collection_fqcn:
    description: 'FQCN for the collection'
    required: true
  collection_repo:
    description: 'Repository name for the collection'
    required: true
  dependencies:
    description: 'Whether to install dependencies'
    required: false
    default: true
  commit_changelog:
    description: 'Whether to commit the changelog'
    required: false
    default: false
  commit_ghpages:
    description: 'Whether to commit docs to gh-pages'
    required: false
    default: true
  changelog_release:
    description: 'Whether to generate release changelogs'
    required: false
    default: false
  generate_docs:
    description: 'Whether to run docs generation with sphinx'
    required: false
    default: true
  path:
    description: 'Working directory for running scripts'
    required: false
    default: '.'
  token:
    description: 'Token for running github operations'
    required: true
runs:
  using: "composite"
  steps:
    - name: Install doc dependencies
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [[ "${{ inputs.dependencies }}" == "true" ]]; then
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          pip install -r requirements.txt
          sudo apt install -y sed hub
        else
          echo "Skipping dependencies install"
        fi

    - name: Create doc directories and resources
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [[ "${{ inputs.generate_docs }}" == "true" ]]; then
          mkdir -p ./docs/plugins ./docs/roles
          cat ./docs/roles.rst.template > ./docs/roles/index.rst
          antsibull-docs collection --use-current --squash-hierarchy --dest-dir docs/plugins  ${{ inputs.collection_fqcn }}
          for role_readme in roles/*/README.md; do
            ln -f -s ../../$role_readme ./docs/roles/$(basename $(dirname $role_readme)).md
            echo "    $(basename $(dirname $role_readme))" >> ./docs/roles/index.rst
          done
        else
          echo "Skipping doc generation"
        fi

    - name: Scan PR merges from latest tag
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        TYPES=("minor_changes" "major_changes" "bugfixes" "deprecated_features" "removed_features" "breaking_changes")
        TAG=$(git describe --abbrev=0 --tags)
        if [[ "${{github.ref}}" == "refs/heads/main" ]]; then
          PRS=($(comm -12 <(git log --oneline ${TAG}.. --format="tformat:%H" | sort ) <(hub pr list -s all -f '%sm%n' --color=never | sort )))
        else
          PREV_TAG=$(git tag | grep -P "^[0-9]+[.][0-9]+[.][0-9]+$" | sort --version-sort -r | head -n2 | grep -v "${TAG}")
          PRS=($(comm -12 <(git log --oneline ${PREV_TAG}..${TAG} --format="tformat:%H" | sort ) <(hub pr list -s all -f '%sm%n' --color=never | sort )))
        fi
        if [[ ${#PRS[@]} > 0 ]]; then
          IFS=$'\n' FRAGMENTS=($(hub pr list -s all -f '%sm~%I~%L~%t~%n' --color=never | grep -P "$(echo "^(${PRS[@]})" | tr ' ' '|')"))
          for frag in "${FRAGMENTS[@]}"; do
            PR=$(echo $frag | cut -d~ -f2)
            type="$(echo $frag | cut -d~ -f3)"
            msg="$(echo $frag | cut -d~ -f4 | sed 's/`/``/g')"
            if [[ "$type" != "" && "${TYPES[*]}" =~ "${type}" ]]; then
              echo "Generating fragment for PR #${PR}"
              echo -e "$type:\n  - >\n    $msg \`#${PR} <https://github.com/${{ inputs.collection_repo }}/pull/${PR}>\`_" \
                > changelogs/fragments/${PR}.yaml
            fi
          done
          antsibull-changelog lint -vvv
          if [[ "${{github.ref}}" == "refs/heads/main" ]]; then
            if [[ "${{ inputs.changelog_release }}" == "true" ]]; then
              echo "Generating changelog for release"
              antsibull-changelog release -v
            else
              DEV_VERSION=$(grep -Po 'version: ?"?[0-9]+[.][0-9]+[.][0-9]+"?' galaxy.yml | awk -F'"' '{ print $2 }')-devel
              echo "Generating changelog for development version ${DEV_VERSION}"
              antsibull-changelog release --version "${DEV_VERSION}" -v
            fi
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Get current version
      shell: bash
      working-directory: ${{ inputs.path }}
      id: changelog_version
      run: echo "::set-output name=TAG_VERSION::$(grep version galaxy.yml | awk -F'"' '{ print $2 }')"

    - name: Commit changelogs
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [[ "${{ inputs.commit_changelog }}" == "true" ]]; then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff --minimal --output-indicator-new=' ' -U0 --no-indent-heuristic CHANGELOG.rst | grep "^ "| sed -e 's/`\(#[0-9]\+\) <.*_/\1/g' > gh-release.md
          git add CHANGELOG.rst changelogs/changelog.yaml
          git commit -m "Update changelog for release ${{ steps.changelog_version.outputs.TAG_VERSION }}" || true
          git push origin
        else
          echo "Skipping commit changelogs"
        fi

    - name: Run sphinx
      shell: bash
      working-directory: ${{ inputs.path }}/docs/
      run: |
        if [[ "${{ inputs.generate_docs }}" == "true" ]]; then
          sphinx-build -M html . _build -v
        else
          echo "Skipping sphinx execution"
        fi

    - name: Commit docs
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [[ "${{ inputs.commit_ghpages }}" == "true" ]]; then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git stash
          git checkout gh-pages
          rm -rf $(basename ${GITHUB_REF})
          mv docs/_build/html $(basename ${GITHUB_REF})
          ln --force --no-dereference --symbolic   main latest
          git show origin/main:docs/_gh_include/header.inc > index.html
          (echo main; echo latest; dirname *.*.*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<li class="toctree-l1"><a class="reference internal" href="@@/">@@</a></li>' >> index.html
          git show origin/main:docs/_gh_include/footer.inc >> index.html
          git add $(basename ${GITHUB_REF}) latest index.html
          git commit -m "Update docs for $(basename ${GITHUB_REF})" || true
          git push origin gh-pages
        else
          echo "Skipping commit to gh-pages"
        fi
